{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","trusted":true},"cell_type":"code","source":"df1 = pd.read_csv('../input/house-prices-advanced-regression-techniques/train.csv')\ndf1.set_index('Id')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"y = np.log1p(df1['SalePrice'])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df2 = pd.read_csv('../input/house-prices-advanced-regression-techniques/test.csv')\ndf2.set_index('Id')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"ntrain = df1.shape[0]\nntest = df2.shape[0]\ndf = pd.concat((df1, df2)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(df.shape))\ndf.set_index('Id', inplace = True)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df1.corr()['SalePrice'].plot(kind = 'bar', figsize = (10,4))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"sns.heatmap(df1.corr())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"all_data_na = (df.isnull().sum() / len(df)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df.isna().sum().plot(kind = 'bar', figsize = (10,4))\nplt.tight_layout","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df['Alley'] = df['Alley'].fillna('None')\ndf['BsmtQual'] = df['BsmtQual'].fillna('None')\ndf['BsmtCond'] = df['BsmtCond'].fillna('None')\ndf['BsmtExposure'] = df['BsmtExposure'].fillna('None')\ndf['BsmtFinType1'] = df['BsmtFinType1'].fillna('None')\ndf['BsmtFinType2'] = df['BsmtFinType2'].fillna('None')\ndf['FireplaceQu'] = df['FireplaceQu'].fillna('None')\ndf['GarageType'] = df['GarageType'].fillna('None')\ndf['GarageFinish'] = df['GarageFinish'].fillna('None')\ndf['GarageQual'] = df['GarageQual'].fillna('None')\ndf['GarageCond'] = df['GarageCond'].fillna('None')\ndf['GarageYrBlt'] = df['GarageYrBlt'].fillna(0)\ndf['PoolQC'] = df['PoolQC'].fillna('None')\ndf['Fence'] = df['Fence'].fillna('None')\ndf['MiscFeature'] = df['MiscFeature'].fillna('None')\ndf['MasVnrType'] = df['MasVnrType'].fillna('None')\ndf['MasVnrArea'] = df['MasVnrArea'].fillna(0)\ndf['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x:x.fillna(x.median()))\ndf['Electrical'] = df['Electrical'].fillna('SBrkr')\ndf['GarageArea'] = df['GarageArea'].fillna(0)\ndf['GarageCars'] = df['GarageCars'].fillna(0)\ndf['BsmtFinSF1'] = df['BsmtFinSF1'].fillna(0)\ndf['BsmtFinSF2'] = df['BsmtFinSF2'].fillna(0)\ndf['BsmtUnfSF'] = df['BsmtUnfSF'].fillna(0)\ndf['TotalBsmtSF'] = df['TotalBsmtSF'].fillna(0)\ndf['BsmtFullBath'] = df['BsmtFullBath'].fillna(0)\ndf['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(0)\ndf['MSZoning'] = df['MSZoning'].fillna('RL')\ndf.drop('Utilities', axis = 1, inplace = True)\ndf[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")\ndf['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\ndf['SaleType'] = df['SaleType'].fillna(df['SaleType'].mode()[0])\ndf['MSSubClass'] = df['MSSubClass'].fillna(\"None\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df.isna().sum().plot(kind = 'bar', figsize = (10,4))\nplt.tight_layout","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"all_data_na = (df.isnull().sum() / len(df)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df.info()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df['BsmtCond']","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df['OverallQual']","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'IR3':\n        return(1)\n    elif x == 'IR2':\n        return(2)\n    elif x == 'IR1':\n        return(3)\n    else: return(4)\ndf['LotShape'] = df['LotShape'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'Sev':\n        return(1)\n    elif x == 'Mod':\n        return(2)\n    else: return(3)\ndf['LandSlope'] = df['LandSlope'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'Po':\n        return(1)\n    elif x == 'Fa':\n        return(2)\n    elif x == 'TA':\n        return(3)\n    elif x == 'Gd':\n        return(4)\n    else: return(5)\ndf['ExterQual'] = df['ExterQual'].apply(lambda x: fn(x))\ndf['ExterCond'] = df['ExterCond'].apply(lambda x: fn(x))\ndf['BsmtQual'] = df['BsmtQual'].apply(lambda x: fn(x))\ndf['BsmtCond'] = df['BsmtCond'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'None':\n        return(1)\n    elif x == 'No':\n        return(2)\n    elif x == 'Mn':\n        return(3)\n    elif x == 'Av':\n        return(4)\n    else: return(5)\ndf['BsmtExposure'] = df['BsmtExposure'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'None':\n        return(1)\n    elif x == 'Unf':\n        return(2)\n    elif x == 'LwQ':\n        return(3)\n    elif x == 'Rec':\n        return(4)\n    elif x == 'BLQ':\n        return(5)\n    elif x == 'ALQ':\n        return(6)\n    else: return(7)\ndf['BsmtFinType1'] = df['BsmtFinType1'].apply(lambda x: fn(x))\ndf['BsmtFinType2'] = df['BsmtFinType2'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'Po':\n        return(1)\n    elif x == 'Fa':\n        return(2)\n    elif x == 'TA':\n        return(3)\n    elif x == 'Gd':\n        return(4)\n    else: return(5)\ndf['HeatingQC'] = df['HeatingQC'].apply(lambda x: fn(x))\ndf['KitchenQual'] = df['KitchenQual'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'None':\n        return(1)\n    elif x == 'Po':\n        return(2)\n    elif x == 'Fa':\n        return(3)\n    elif x == 'TA':\n        return(4)\n    elif x == 'Gd':\n        return(5)\n    else: return(6)\ndf['FireplaceQu'] = df['FireplaceQu'].apply(lambda x: fn(x))\ndf['GarageQual'] = df['GarageQual'].apply(lambda x: fn(x))\ndf['GarageCond'] = df['GarageCond'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'None':\n        return(1)\n    elif x == 'Fa':\n        return(2)\n    elif x == 'TA':\n        return(3)\n    elif x == 'Gd':\n        return(4)\n    else: return(5)\ndf['PoolQC'] = df['PoolQC'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'None':\n        return(1)\n    elif x == 'MnWw':\n        return(2)\n    elif x == 'GdWo':\n        return(3)\n    elif x == 'MnPrv':\n        return(4)\n    else: return(5)\ndf['Fence'] = df['Fence'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'None':\n        return(1)\n    elif x == 'Unf':\n        return(2)\n    elif x == 'RFn':\n        return(3)\n    else: return(4)\ndf['GarageFinish'] = df['GarageFinish'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def fn(x):\n    if x == 'N':\n        return(1)\n    elif x == 'P':\n        return(2)\n    else: return(3)\ndf['PavedDrive'] = df['PavedDrive'].apply(lambda x: fn(x))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df['MSSubClass'] = df['MSSubClass'].apply(str)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df.info()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"numeric_feats = df.dtypes[df.dtypes != \"object\"].index","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df[numeric_feats])\ndf[numeric_feats] = scaler.transform(df[numeric_feats])\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#from sklearn.preprocessing import MinMaxScaler\n#scaler = MinMaxScaler()\n#scaler.fit(df[numeric_feats])\n#df[numeric_feats] = scaler.transform(df[numeric_feats])\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df = pd.get_dummies(df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train = df[:len(df1)]\ntest = df[len(df1):]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 420)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"n_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, x_train, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\nlasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, loss='huber', random_state =5)\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,random_state =7, nthread = -1)\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nLR = LinearRegression()\nscore = rmsle_cv(LR)\nprint(\"LR score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.svm import SVR\nSV = SVR()\nscore = rmsle_cv(SV)\nprint(\"SVR score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nLR = LinearRegression()\nLR.fit(train, y)\npred = np.expm1(LR.predict(test))\nsolution = pd.DataFrame({\"id\":df2.Id, \"SalePrice\":pred})\nsolution.to_csv(\"submission1.csv\", index = False)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.svm import SVR\nSV = SVR()\nSV.fit(train, y)\npred = np.expm1(SV.predict(test))\nsolution = pd.DataFrame({\"id\":df2.Id, \"SalePrice\":pred})\nsolution.to_csv(\"submission2.csv\", index = False)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nRF = RandomForestRegressor(n_estimators=100, criterion='mse',)\nRF.fit(train, y)\npred = np.expm1(RF.predict(test))\nsolution = pd.DataFrame({\"id\":df2.Id, \"SalePrice\":pred})\nsolution.to_csv(\"submission3.csv\", index = False)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nRF = RandomForestRegressor(n_estimators=100, criterion='mse',)\nRF.fit(train, y)\npred = np.expm1(RF.predict(test))\nsolution = pd.DataFrame({\"id\":df2.Id, \"SalePrice\":pred})\nsolution.to_csv(\"submission3.csv\", index = False)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"x = train.values\ny = y.values","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout\nmodel = Sequential()\nmodel.add(Dense(246 ,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(128,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(64 ,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(32 ,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(16 ,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(4 ,activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1))\nmodel.compile(optimizer = 'adam', loss = 'mse')\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=100)\nmodel.fit(x=x_train, \n          y=y_train, \n          epochs=1000,\n          validation_data=(x_test, y_test), verbose=1,\n          callbacks=[early_stop]\n          )","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","source":"model.fit(x_train, y_train, epochs = 1000, validation_data = (x_test,y_test), verbose = 1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"losses = pd.DataFrame(model.history.history)\nlosses[['loss','val_loss']].plot()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"pred = np.expm1(model.predict(test.values))\nsolution = pd.DataFrame({\"Id\":df2.Id, \"SalePrice\":pred[:,0]})\nsolution.to_csv(\"submission4.csv\", index = False)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}